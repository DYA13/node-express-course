1. In this lesson, you created a middleware function called asyncWrapper. Why?
We have asynchronous operations and a better solution is to create a middleware function that wraps our controllers.
 This approach enables us to avoid code repetition by setting up the functionality once in the middleware and then using it across multiple controller functions

 2.  Code completed 
 
  const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    const error= new CustomAPIError(‘Task with id ${taskID} not found’, 404)
return next(error)
  }
  res.status(200).json({ task });
});
